<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Kgraft on Muhammad Fahrizal Rahman </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>https://riesal.github.io/tags/kgraft/</link>
    <language>en-us</language>
    
    
    <updated>Sat, 13 Aug 2016 16:06:47 &#43;0000</updated>
    
    <item>
      <title>Upgrade Ubuntu Kernel without Reboot</title>
      <link>https://riesal.github.io/2016/08/upgrade-ubuntu-kernel-without-reboot/</link>
      <pubDate>Sat, 13 Aug 2016 16:06:47 &#43;0000</pubDate>
      
      <guid>https://riesal.github.io/2016/08/upgrade-ubuntu-kernel-without-reboot/</guid>
      <description>&lt;p&gt;&lt;strong&gt;It is simply how to allow kernel swap without needing reboot.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;New live kernel patching projects have hit LKML recently&lt;a href=&#34;https://lkml.org/lkml/2014/4/30/477&#34;&gt; [1]&lt;/a&gt;&lt;a href=&#34;https://lkml.org/lkml/2014/5/1/273&#34;&gt;[2]&lt;/a&gt;, and I&amp;rsquo;ve taken the opportunity to test drive kGraft with the Ubuntu kernel. This post documents how to get a sample patch working.&lt;/p&gt;

&lt;p&gt;&lt;span id=&#34;more-4512&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;A Simple Example
First, I had to take the patches from [3] and apply them against the ubuntu-utopic kernel, which is based on 3.15-rc8 as of this post. They cherry-picked cleanly and the branch I&amp;rsquo;m using is stored here [4]. In addition to applying the patches I had to also enable CONFIG_KGRAFT. A pre-built test kernel can be downloaded here [5].&lt;/p&gt;

&lt;p&gt;Next, I created a test VM and installed the test kernel, headers, and build dependencies into that VM and rebooted. Now after a successful reboot, we need to produce an actual patch to test. I&amp;rsquo;ve created a github project [6] with the sample patch; to make it easy to clone and get started.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install git build-essential
git clone https://github.com/arges/kgraft-examples.git
cd kgraft-examples
make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code in kgraft_patcher.c is the example found in samples/kgraft [7]. Now we can build it easily using the Makefile I have in my project by typing make.&lt;/p&gt;

&lt;p&gt;Next, the module needs to be inserted using the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo insmod ./kgraft_patcher.ko
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the following to see if the module loaded properly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lsmod | grep kgraft
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll notice some messages printed with the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[  211.762563] kgraft_patcher: module verification failed: signature
and/or  required key missing - tainting kernel [  216.800080] kgr
failed after timeout (30), still in degraded mode [  246.880146] kgr
failed after timeout (30), still in degraded mode [  276.960211] kgr
failed after timeout (30), still in degraded mode&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means that not all processes have entered the kernel and may not have a &amp;ldquo;new universe&amp;rdquo; flag set.  Run the following to see which processes still needs to be updated.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat /proc/*/kgr_in_progress
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to get all processes to enter the kernel sometimes a signal needs to be sent to get the process to enter the kernel.&lt;/p&gt;

&lt;p&gt;An example of this is found in the kgraft-examples [6] called &amp;lsquo;gethurry.sh&amp;rsquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
for p in $(ls /proc/ | grep &#39;^[0-9]&#39;); do
  if [[ -e /proc/$p/kgr_in_progress ]]; then
    if [[ `sudo cat /proc/$p/kgr_in_progress` -eq 1 ]]; then
     echo $p;
     sudo kill -SIGCONT $p
    fi
  fi
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is checks for all processes that have &amp;lsquo;kgr_in_progress&amp;rsquo; set and sends a SIGCONT signal to that process.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve noticed that I had to also send a SIGSTOP followed by a SIGCONT to finally get everything synced up.&lt;/p&gt;

&lt;p&gt;Eventually you&amp;rsquo;ll see:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[ 1600.480233] kgr succeeded&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now your kernel is running the new patch without rebooting!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
